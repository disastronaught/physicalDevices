This is a neat one. It's back in the realm of physical security and signal analysis. 
After seeing the flipper pop up everywhere and thinking "I should build one of those from the ground up"
I decided to get a lower level dev kit where you could see and interact with the hardware a little more.
Also the different ranges allow for more customized bands in the capture range.

I bought a Proxmark3Easy which at the time was a nicely discounted $41 on Amazon. This is the "512" model
so it's compatible with Iceman's code written specifically for Proxmark devices.
For the startup and trial uses, I'm borrowing methodology from DangerousThings.com
He does an excellent unboxing and full startup tutorial here: https://www.youtube.com/watch?v=o6WOTM4D970
Also if you're a text based learner (like me) he has a 10 page or so writeup here: https://dngr.us/pm3-guide
All tests done with this device as recorded here are for educational purposes.
All physical penetration testing and security audits performed with this device are under Master Service Agreements
and their nature/success is covered by Non Disclosure Agreements.
Please use this knowledge legally. I am not responsible for illegal use of near field communication devices
developed with the techniques listed here. Sniff responsibly.

Communicating with the pm3 over USB and ensuring smooth delivery of binaries/drivers
  The first time I plugged this in, I honestly didn't know what to expect. With microcontrollers, chipsets and longworks modules
  you're usually in C or Assembly, developing IO relational functions for use with peripheral attachments.
  Or in the case of Arduino you're basically coding in C++ for a flash script to loop or run one iteration.
  Apparently the pm3 is a little less friendly, and it's imperative to flow through the BUSID or COM port identification to ensure 
  you're device is seen and communicating as intended.
  This is as simple as searching "Device Manager" in the Windows search bar and selecting the "Ports" drop down menu.
  If you see COM6, this is a good sign and the device is recognized.

Loading an IDE for the pm3
  As you can imaging, and DT.com mentions in his tutorials, the Git for proxspace is sort of convoluted to most windows users.
  Whereas on Linux we'd likely follow a few apt-get or pip install commands, with Windows systems, we're downloading packages and 
  running them with the intent that they compile and follow the paths that are set by default.
  ***as noted proxspace (our development environment for interacting with the pm3) uses a directory structure based on 
  Disc Operating System(DOS) where certain keystrokes throw errors, such as spaces and speacial characters in directory names.

  To save the time most will spend searching the github for proxspace, just go here: 
  https://github.com/Gator96100/ProxSpace/releases/tag/v3.11 and scroll to the bottom of the page for proxspace.7z.
  More on the DOS bit. I emulate retro games quite a bit (exclusively, I don't play anything newer than 1997). 
  So my machine attempted to load this into ScummVM (where I run a claymation game). Open this in file explorer, 
  because it may latch to emulation software if you have anything ancient running on your OS. I did as I was told
  and loaded it into a folder titled "c:/working" so the pointers would recognize the DOS8.3 labelling scheme.

  I ran the runme64 batch file, which pulled down quite a large ammount of supplemental files for later use.
  Instead of waiting for it to populate into the terminal, I ran this from a powershell window by just sending run[tab] and [enter]

Updating
  I ran this straight from dangerous things setup help page: git clone https://github.com/RfidResearchGroup/proxmark3.git
  This takes a considerable amount of time. After this I changed to the directory where the firmware is: cd proxmark3/
  cp Makefile.platform.sample Makefile.platform
  notepad Makefile.platform
  once in the notepad, I commented out what DangerousThings suggested and enabled a few more features by removing the '#' from
  some flash addons such as bluetooth. I have an air tag, and want to see if it can be analyzed using the pm3.

Booting into the pm3 terminal
  ./pm3-flash-fullimage (I had run the ./pm3-flash-bootrom and gotten an error so I ran this one 
  My problem was with the device now being recognized as a USB device so I fixed this by
  Unplugging the Proxmark and holding the bootselect button when I plugged it back in.
  This continuid the loadout and when I sent
  pm3
  it loaded into the pm3 terminal with no issues.

Capture Configurations
  This is the learning curve. I didn't have a loaded keycard on hand, however... I did have a Fengbros UV-5X3 
  which is basically a full band Baofeng
  To test the functionality, I want to crank the radio on, and tune it to a VHF freq, and see if the Proxmark alerts and captures 
  during an active broadcast (keying the mic).
  And The scan range on LF channels has a floor of 134KHz, so that's not happening unless I fire up the SDR.
  However, I shined a light through all of the sample key cards that came with the Proxmark and this model came with three
  HF and one LF card. 
  The command:
  lf search
  works to identify the tag and displays which type of transmission is configured.

Now that the loadout is done, and testing is functional, we need a screen and maybe a selection button....









